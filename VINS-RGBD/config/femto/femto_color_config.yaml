%YAML:1.0

# L515 Config

#common parameters
#image_topic: "/camera/color/image_raw"

image_topic: "/camera/color/image_raw"

imu_topic: "/camera/imu/imu"

point_topic: "/camera/depth/color/points"

# depth_topic: "/camera/aligned_depth_to_color/image_raw"
depth_topic: "/camera/depth/image_raw"
output_path: "/home/lyp/vins_rgbd_output/"

#pointcloud settings
pcl_dist: 10
u_boundary: 10
d_boundary: 10
l_boundary: 40
r_boundary: 40
pcl_min_dist: 0.3
pcl_max_dist: 6
resolution: 0.02

#camera calibration
model_type: PINHOLE
camera_name: camera
image_width: 640
image_height: 480
  #TODO modify distortion

distortion_parameters:
   # k1: 0.020034726709127426
   # k2: -0.08602049946784973
   # p1: -0.00019022979540750384
   # p2: 0.00013130763545632362

   k1: 0.01602191698305401
   k2: -0.06636235128476678
   p1: 0.00102161038552525
   p2: 0.00018002089118429818

projection_parameters:
   # fx: 520.2527465820312
   # fy: 520.2527465820312
   # cx: 309.72003173828125
   # cy: 237.07284545898438

   fx: 517.232285750096
   fy: 515.0296859162651
   cx: 309.8322153592324
   cy: 241.31691788325548

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 1   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [0.9747450602501946, 0.21964796781315302, 0.04033407682588784,
          -0.21529052075538516, 0.9722390314642857, -0.0916583731595906,
          -0.05934693918577101, 0.08066000206384685, 0.9949733186756017]

#   0.999943        -0.00932683       0.0052792
#   0.00945274       0.999659        -0.0243487
#   -0.0050503        0.0243972        0.99969
#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [0.06107711907666765,-0.008858041767732276, 0.09515624749777886]
# -0.0120648602023721  0.00217691715806723  0.0023775571025908
#feature traker paprameters
max_cnt: 200           # max feature number in feature tracking
min_dist: 15            # min distance between two features
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 1             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
#for handheld, wheeld
acc_n: 0.010479936407188575          # accelerometer measurement noise standard deviation. #0.2
gyr_n: 0.004038235565328463         # gyroscope measurement noise standard deviation.     #0.05
acc_w: 0.00017550861436602412         # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 6.496975019491633e-05       # gyroscope bias random work noise standard deviation.     #4.0e-5

## IMU noise (Use those from VINS-mono)
# IMU.NoiseGyro: 1.7794149940431553e-03 # 3 # 2.44e-4 #1e-3 # rad/s^0.5
# IMU.NoiseAcc: 1.2540381093709233e-02 #2 # 1.47e-3 #1e-2 # m/s^1.5
# IMU.GyroWalk: 3.9583466940523015e-05 # rad/s^1.5
# IMU.AccWalk: 5.0875897222204614e-04 # m/s^2.5
# IMU.Frequency: 500.0

#for tracked applications
#acc_n: 0.5          # accelerometer measurement noise standard deviation. #0.2
#gyr_n: 0.01         # gyroscope measurement noise standard deviation.     #0.05
#acc_w: 0.001         # accelerometer bias random work noise standard deviation.  #0.02
#gyr_w: 2.0e-5       # gyroscope bias random work noise standard deviation.     #4.0e-5


g_norm: 9.8       # gravity magnitude

#loop closure parameters
loop_closure: 1                    # start loop closure
fast_relocalization: 1             # useful in real-time and large project
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/lyp/vins_rgbd_output/pose_graph/" # save and load path /home/ran/vins_rgbd_output/

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
td: 0.0                       # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 1                      # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0.033               # unit: s. rolling shutter read out time per frame (from data sheet).

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ

#阻断时间戳区间
# cut_begin: 1552759720.0
# cut_end: 1552759730.0
# cut_begin: 1552759688.0
# cut_end: 1552759700.0
cut_begin: 0
cut_end: 0

#VoxelGrid滤波分辨率
Voxel_res: 0.5
Voxel_res1: 0.4

g_LiDAR_sampling_point_step: 3
group_size: 8

#是否融合深度点云
if_depth: 0
depth_scale: 1000.0
